treatment1id %in% treatmentids & sampleid %in% sampleids
]
data.table::setnames(subset_raw_tr, c("V1", "treatment1id", "treatment1dose"), c("viability", "treatmentid", "treatmentdose"))
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
guess <- CoreGx::guessMapping(
tremapper,
list(
rowDataMap=c("treatmentdose", "treatmentid"),
colDataMap=c("sampleid"),
assayMap=c("treatmentdose", "treatmentid", "sampleid")
),
subset=TRUE
)
CoreGx::rowDataMap(tremapper) <- guess$rowDataMap
CoreGx::colDataMap(tremapper) <- guess$colDataMap
CoreGx::assayMap(tremapper) <- list( raw = guess$assayMap)
(dummy_tre <- CoreGx::metaConstruct(tremapper))
(dummy_pset <- PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre,
curation = list(sample = data.frame(),treatment = data.frame(), tissue = data.frame())
))
usethis::use_data(dummy_pset, overwrite = TRUE)
dummy_pset
summarizeMolecularProfiles(dummy_pset, "rnaseq.tpm")
summarizeMolecularProfiles(dummy_pset, "rnaseq.tpm.batch")
batch1
# batchid should be 1 for samples in batch1 and 2 otherwise
batch_colData <- data.frame(sampleid=sampleids, batchid=1)
batch_colData$batchid[!batch_colData$sampleid %in% batch1] <- 2
batch_colData
batch1
batch_colData
subset_raw_tr
dummy_pset
message("Fitting treatment response curves")
tre_fit <- tre |> CoreGx::endoaggregate(
{  # the entire code block is evaluated for each group in our group by
# 1. fit a log logistic curve over the dose range
fit <- PharmacoGx::logLogisticRegression(Dose, Viability,
viability_as_pct=FALSE)
# 2. compute curve summary metrics
ic50 <- PharmacoGx::computeIC50(Dose, Hill_fit=fit)
aac <- PharmacoGx::computeAUC(Dose, Hill_fit=fit)
# 3. assemble the results into a list, each item will become a
#   column in the target assay.
list(
HS=fit[["HS"]],
E_inf = fit[["E_inf"]],
EC50 = fit[["EC50"]],
Rsq=as.numeric(unlist(attributes(fit))),
aac_recomputed=aac,
ic50_recomputed=ic50
)
},
assay="sensitivity",
target="profiles",
enlist=FALSE,  # this option enables the use of a code block for aggregation
by=c("treatmentid", "sampleid"),
nthread=THREADS  # parallelize over multiple cores to speed up the computation
)
dummy_pset@treatmentResponse -> tre
tre
tre |> CoreGx::endoaggregate()
tre
tre$raw
tre |> CoreGx::endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
viability_as_pct=FALSE)
ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
list(
HS=fit[["HS"]],
E_inf = fit[["E_inf"]],
EC50 = fit[["EC50"]],
Rsq=as.numeric(unlist(attributes(fit))),
aac_recomputed=aac,
ic50_recomputed=ic50
)
},
assay="raw",
target="profiles",
by=c("treatmentid", "sampleid")
)
tre |> CoreGx::endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
viability_as_pct=FALSE)
ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
list(
HS=fit[["HS"]],
E_inf = fit[["E_inf"]],
EC50 = fit[["EC50"]],
Rsq=as.numeric(unlist(attributes(fit))),
aac_recomputed=aac,
ic50_recomputed=ic50
)
},
assay="raw",
target="profiles",
by=c("treatmentid", "sampleid"),
nthread=4
)
tre |> CoreGx::endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
viability_as_pct=FALSE)
# ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
# aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
# list(
#   HS=fit[["HS"]],
#   E_inf = fit[["E_inf"]],
#   EC50 = fit[["EC50"]],
#   Rsq=as.numeric(unlist(attributes(fit))),
#   aac_recomputed=aac,
#   ic50_recomputed=ic50
# )
},
assay="raw",
target="profiles",
by=c("treatmentid", "sampleid"),
nthread=4
) -> tre_fit
tre |> CoreGx::endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
viability_as_pct=FALSE)
# ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
# aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
# list(
#   HS=fit[["HS"]],
#   E_inf = fit[["E_inf"]],
#   EC50 = fit[["EC50"]],
#   Rsq=as.numeric(unlist(attributes(fit))),
#   aac_recomputed=aac,
#   ic50_recomputed=ic50
# )
},
assay="raw",
target="profiles",
by=c("treatmentid", "sampleid"),
nthread=8
) -> tre_fit
tre
tre$raw
tre |> CoreGx::endoaggregate(
{
mean_ <- mean(Viability)
list(
mean=mean_,
sd=sd(Viability),
cv=sd(Viability)/mean_
)
# fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
#                                          viability_as_pct=FALSE)
# ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
# aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
# list(
#   HS=fit[["HS"]],
#   E_inf = fit[["E_inf"]],
#   EC50 = fit[["EC50"]],
#   Rsq=as.numeric(unlist(attributes(fit))),
#   aac_recomputed=aac,
#   ic50_recomputed=ic50
# )
},
assay="raw",
target="profiles",
enlist=FALSE,
by=c("treatmentid", "sampleid"),
nthread=8
) -> tre_fit
tre |> CoreGx::endoaggregate(
{
mean_ <- mean(viability)
list(
mean=mean_,
sd=sd(viability),
cv=sd(viability)/mean_
)
# fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
#                                          viability_as_pct=FALSE)
# ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
# aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
# list(
#   HS=fit[["HS"]],
#   E_inf = fit[["E_inf"]],
#   EC50 = fit[["EC50"]],
#   Rsq=as.numeric(unlist(attributes(fit))),
#   aac_recomputed=aac,
#   ic50_recomputed=ic50
# )
},
assay="raw",
target="profiles",
enlist=FALSE,
by=c("treatmentid", "sampleid"),
nthread=8
) -> tre_fit
tre_fit
tre_fit$profiles
tre
tre@rowData
tre@rowData$treatmentid |> unique()
tre
tre$raw
tre |> CoreGx::endoaggregate(
{
mean_viability <- mean(viability)
list(
mean_viability=mean_viability,
std_viability=sd(viability),
)
# fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
#                                          viability_as_pct=FALSE)
# ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
# aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
# list(
#   HS=fit[["HS"]],
#   E_inf = fit[["E_inf"]],
#   EC50 = fit[["EC50"]],
#   Rsq=as.numeric(unlist(attributes(fit))),
#   aac_recomputed=aac,
#   ic50_recomputed=ic50
# )
},
assay="raw",
target="profiles",
enlist=FALSE,
by=c("treatmentid", "sampleid"),
nthread=8
) -> tre_fit
tre |> CoreGx::endoaggregate(
{
mean_viability <- mean(viability)
list(
mean_viability=mean_viability,
std_viability=sd(viability)
)
# fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
#                                          viability_as_pct=FALSE)
# ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
# aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
# list(
#   HS=fit[["HS"]],
#   E_inf = fit[["E_inf"]],
#   EC50 = fit[["EC50"]],
#   Rsq=as.numeric(unlist(attributes(fit))),
#   aac_recomputed=aac,
#   ic50_recomputed=ic50
# )
},
assay="raw",
target="profiles",
enlist=FALSE,
by=c("treatmentid", "sampleid"),
nthread=8
) -> tre_fit
tre_fit
tre_fit$profiles
tre |> CoreGx::endoaggregate(
{
# mean_viability <- mean(viability)
#
# list(
#   mean_viability=mean_viability,
#   std_viability=sd(viability)
# )
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
viability_as_pct=FALSE)
ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
list(
HS=fit[["HS"]],
E_inf = fit[["E_inf"]],
EC50 = fit[["EC50"]],
Rsq=as.numeric(unlist(attributes(fit))),
aac_recomputed=aac,
ic50_recomputed=ic50
)
},
assay="raw",
target="profiles",
enlist=FALSE,
by=c("treatmentid", "sampleid"),
nthread=8
) -> tre_fit
help("NCI_ALMANAC_raw")
usethis::use_data()
usethis::use_data
NCI_ALMANAC_2017
?usethis::use_author
usethis::use_author("Julia", "Ngyugen", role="aut")
pki
pak::pkg_install(".")
pak::pkg_install(".")
pak::pkg_install(".")
# Set seed for reproducibility
set.seed(123)
data("NCI_ALMANAC_sample_metadata")
data("NCI60_molecular_data")
allsampleids <- NCI60_molecular_data$sampleid
# take 50 random samples
sampleids <- allsampleids[sample(1:length(allsampleids), 50, replace = FALSE)]
num_samples <- length(sampleids)
# Generate fake gene IDs based on Gencode annotation pattern
gene_ids <- paste0("GENE", sprintf("%03d", 1:100))  # 100 fake Gencode gene IDs
dummy_sampleMetadata <- NCI_ALMANAC_sample_metadata[sampleids,]
# Create a matrix of TPM normalized counts with random values between 0 and 100
tpm_matrix <- matrix(
runif(num_samples * length(gene_ids), 0, 100),
nrow = length(gene_ids),
dimnames = list(gene_ids, sampleids)
)
# Create a matrix with an intentional batch effect
batch1 <- sample(colnames(tpm_matrix), size = 25)
batch_rna <- tpm_matrix
batch_rna[,colnames(batch_rna) %in% batch1] <- batch_rna[,colnames(batch_rna) %in% batch1] * 1.2
rnaseq_tpm_se <- SummarizedExperiment::SummarizedExperiment(
assays=list(exprs=tpm_matrix),
colData=data.frame(sampleid=sampleids, batchid=1),
metadata=list(
annotation="rnaseq"
)
)
# batchid should be 1 for samples in batch1 and 2 otherwise
batch_colData <- data.frame(sampleid=sampleids, batchid=1)
batch_colData$batchid[!batch_colData$sampleid %in% batch1] <- 2
rnaseq_tpm_batch_se <- SummarizedExperiment::SummarizedExperiment(
assays=list(exprs=batch_rna),
colData=batch_colData,
metadata=list(
annotation="rnaseq"
)
)
dummy_mae <- MultiAssayExperiment::MultiAssayExperiment(
experiments=list(
"rnaseq.tpm"=rnaseq_tpm_se,
"rnaseq.tpm.batch"=rnaseq_tpm_batch_se
),
colData = dummy_sampleMetadata
)
usethis::use_data(dummy_mae, overwrite = TRUE)
data("NCI_ALMANAC_raw")
data("NCI_ALMANAC_treatment_metadata")
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
treatmentids <- subset_treatmentmeta$treatmentid
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL, CONC1)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
data.table::setnames(subset_raw_tr, c("V1", "treatment1id", "treatment1dose"), c("viability", "treatmentid", "treatmentdose"))
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
guess <- CoreGx::guessMapping(
tremapper,
list(
rowDataMap=c("treatmentdose", "treatmentid"),
colDataMap=c("sampleid"),
assayMap=c("treatmentdose", "treatmentid", "sampleid")
),
subset=TRUE
)
CoreGx::rowDataMap(tremapper) <- guess$rowDataMap
CoreGx::colDataMap(tremapper) <- guess$colDataMap
CoreGx::assayMap(tremapper) <- list( raw = guess$assayMap)
(dummy_tre <- CoreGx::metaConstruct(tremapper))
(dummy_pset <- PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre,
curation = list(sample = data.frame(),treatment = data.frame(), tissue = data.frame())
))
usethis::use_data(dummy_pset, overwrite = TRUE)
message("Fitting treatment response curves")
tre |> CoreGx::endoaggregate(
{
# mean_viability <- mean(viability)
#
# list(
#   mean_viability=mean_viability,
#   std_viability=sd(viability)
# )
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability,
viability_as_pct=FALSE)
ic50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit=fit)
aac <- PharmacoGx::computeAUC(treatmentdose, Hill_fit=fit)
list(
HS=fit[["HS"]],
E_inf = fit[["E_inf"]],
EC50 = fit[["EC50"]],
Rsq=as.numeric(unlist(attributes(fit))),
aac_recomputed=aac,
ic50_recomputed=ic50
)
},
assay="raw",
target="profiles",
enlist=FALSE,
by=c("treatmentid", "sampleid"),
nthread=8
) -> tre_fit
pak::pkg_install(".")
pak::pkg_install("rmdformats")
pak::pkg_install("learnr")
usethis::use_package("pander")
usethis::use_package("pander",type = "Suggests")
usethis::use_package("pander",type = "Suggests")
history()
usethis::use_author("firstname", "secondname", role="aut")
biocthis::use_bioc_vignette("Module 3", "Module 3: Intro to pharmacogenomics in the context of cancer")
biocthis::use_bioc_vignette("Module3", "Module 3: Intro to pharmacogenomics in the context of cancer")
biocthis::use_bioc_vignette("Module", "Module 4: Pharmacogenomics for biomarker discovery - Advanced analysis")
usethis::use_package("meta", "Suggests")
pak::pkg_install("bhklab/CBWWorkshop2024", dependencies=TRUE)
pak::pkg_install("bhklab/CBWWorkshop2024", dependencies=TRUE)
y
local::.
usethis::use_package("pander", "Suggests")
pkgdown::build_site()
pkgdown::build_site()
- **Install and Load PharmacoGx**
usethis::use_github_actions_badge(name="pkgdown.yaml")
?usethis::use_github_action()
usethis::use_github_action("pr-commands")
git status
pak::pkg_install('metrumresearchgroup/sinew')
sinew::makeOxygen(CBWWorkshop::dummy_pset)
sinew::makeOxygen(CBWWorkshop2024::dummy_pset)
?sinew::makeOxygen(CBWWorkshop2024::dummy_pset)
CBWWorkshop2024::dummy_pset
pp <- CBWWorkshop2024::dummy_pset
?sinew::makeOxygen(pp)
sinew::makeOxygen(pp)
sinew::makeOxygen
usethis::use_r("CBWWorkshop2024_dummy_data.R")
devtools:::document()
sinew:::interOxyAddIn()
styler:::style_active_pkg()
lintr:::addin_lint_package()
styler:::style_active_file()
lintr:::addin_lint()
devtools::load_all()
CBWWorkshop2024::dummy_pset
CBWWorkshop2024::dummy_pset
pset <- CBWWorkshop2024::dummy_pset
PharmacoGx::sampleNames(pset)
PharmacoGx::sampleNames(pset) |> len()
PharmacoGx::sampleNames(pset) |> length()
PharmacoGx::treatmentNames(pset) |> length()
PharmacoGx::show(pset)
?data("NCI_ALMANAC_2017")
?CBWWorkshop2024::NCI_ALMANAC_2017
??CBWWorkshop2024::NCI_ALMANAC_2017
?CBWWorkshop2024::NCI_ALMANAC_raw
CBWWorkshop2024::NCI_ALMANAC_2017
PharmacoGx::treatmentNames(pset) |> length()
PharmacoGx::sampleNames(pset) |> length()
pset
roxygen2::roxygenise()
NCI_ALMANAC_2017
NCI_ALMANAC_2017@treatment
NCI_ALMANAC_2017@treatment |> dim()
NCI_ALMANAC_2017@treatment
NCI_ALMANAC_2017
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::load_all(".")
devtools::build_manual()
devtools::build()
devtools::document()
devtools::document()
devtools::install()
CBWWorkshop2024::NCI_ALMANAC_2017
CBWWorkshop2024::NCI_ALMANAC_2017
NCI_ALMANAC_pset <- CBWWorkshop2024::NCI_ALMANAC_2017
usethis::use_data(NCI_ALMANAC_pset)
usethis::use_data(NCI_ALMANAC_pset, overwrite=TRUE)
devtools::build_site(quiet=FALSE)
devtools::build_site(quiet=FALSE)
devtools::document()
devtools::build_site(quiet=FALSE)
devtools::build_site(quiet=FALSE)
sScores <- data.frame(matrix(NA, nrow = 0, ncol = 100))
#'  \item{sample}{50 samples}
#'  \item{treatment}{22 treatments}
#'  \item{molecularProfiles}{A `MultiAssayExperiment` with 2
#'  `SummarizedExperiments`, both are RNASeq, but
#'  we have manually applied a batch effect to one of them}
#'  \item{treatmentResponse}{A `TreatmentResponseExperiment` with 184 total
#'  experiments. Only the `raw` assay is included.
#'  }
#'}
#' @keywords datasets
"dummy_pset"
roxygen2::roxygenise()
devtools::document()
devtools::install()
devtools::build_site()
