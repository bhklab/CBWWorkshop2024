by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
|>
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
with(expr=hist(N))
?with
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
res
res
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) -> res
res
res
with(res, hist(N))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
with(expr=hist(N))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
with(expr=hist(N))
?hist
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
with(expr=hist(N, main="Histogram of Number of Replicates", xlab="Number of Replicates"))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
head()
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |> # pipe into a function that orders by N then pipe into head
.[order(-N)] |>
head()
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)  -> wooo
woo
wooo
wooo[order(-N)]
order
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |> # pipe into a function that orders by N then pipe into head
with(expr=order(-N)))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
with(expr=order(-N)))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
with(expr=order(-N))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorder(N)
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorder(N)
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(N)
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"))  -> what
what
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"), order(-1L))
tre
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"), order(-1L)) |>
head()
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"), order(1L)) |>
head()
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"), order(1L)) |>
head()
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"), order(1L)) -> tre_agg
head(tre_agg)
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
data.table::setorderv(cols=c("N"), order(-1L)) -> tre_agg
head(tre_agg)
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
subset(N > 1) |>
head()
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
subset(N > 1)
tre$sensitivity
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
subset(N > 10)
aggregate
showMethods(aggregate)
help("aggregate.TreatmentResponseExperiment")
help("aggregate,TreatmentResponseExperiment")
?("aggregate,TreatmentResponseExperiment")
?aggregate,TreatmentResponseExperiment
?"aggregate,TreatmentResponseExperiment"
??"aggregate,TreatmentResponseExperiment"
??"aggregate"
tre
)
tre |>
subset(treatmentid %in% c("Doxorubicin", "Ixabepilone")) |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
tre |>
subset(treatmentid %in% c("Doxorubicin", "Ixabepilone")) |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
subset(N>1)
tre |>
subset(treatmentid %in% c("Doxorubicin", "Ixabepilone")) |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
subset(N>1, sampleid =="A-498")
tre |>
subset(treatmentid %in% c("Doxorubicin", "Ixabepilone")) |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
subset(N>1 & sampleid =="A-498")
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) |>
with(expr=hist(N, main="Histogram of Number of Replicates", xlab="Number of Replicates"))
tre  |>
aggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
) -> techhh
techhh
tre$sensitivity
tre$sensitivity$tech_rep
tre$sensitivity[unique(tech_rep)]
tre$sensitivity[,unique(tech_rep)]
showMethods("endoaggregate")
help("endoaggregate")
methods("endoaggregate")
??endoaggregate
new_tre <- tre  |>
endoaggregate(
assay="sensitivity",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
show(new_tre)
new_tre$sensitivity
new_tre <- tre  |>
endoaggregate(
assay="sensitivity",
target="tech_rep_counts",
N=.N,
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
show(new_tre)
show(new_tre$tech_rep_counts)
head(new_tre$tech_rep_counts)
head(new_tre$tech_rep_counts[order(-N)])
tre  |>
endoaggregate(
sensitivity=mean,
assay="sensitivity",
target="mean_sensitivity",
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
tre  |>
endoaggregate(
sensitivity=mean(sensitivity),
assay="sensitivity",
target="mean_sensitivity",
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
tre
tre  |>
endoaggregate(
sensitivity=mean(viability),
assay="sensitivity",
target="mean_sensitivity",
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
tre_avged <- tre  |>
endoaggregate(
sensitivity=mean(viability),
assay="sensitivity",
target="mean_sensitivity",
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
head(tre_avged$mean_sensitivity))
head(tre_avged$mean_sensitivity)
str(tre_avged$mean_sensitivity)
tre_avged
tre
tre_avged
rowData(tre_avged)
rowData(tre_avged)[,unique(treatmentid)]
rowData(tre_avged)[1:3,unique(treatmentid)]
rowData(tre_avged)[,unique(treatmentid)][1:3]
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
IC50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit = fit)
AAC <- PharmacoGx::computeAUC(treatmentdose, Hill_fit = fit, area.type = "Fitted")
list(
HS = fit[["HS"]], E_inf = fit[["E_inf"]]/100, EC50 = fit[["EC50"]],
Rsq = as.numeric(unlist(attributes(fit))),
AAC = AAC,
IC50 = IC50
)
},
assay="mean_sensitivity",
subset= treatmentid %in% rowData(tre_avged)[,unique(treatmentid)][1:3],
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles"
)
tre_avged$mean_sensitivity
tre_avged <- tre  |>
endoaggregate(
viability=mean(viability),
assay="sensitivity",
target="mean_sensitivity",
by=c("treatmentid", "treatmentdose", "sampleid", "bio_rep")
)
str(tre_avged$mean_sensitivity)
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
IC50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit = fit)
AAC <- PharmacoGx::computeAUC(treatmentdose, Hill_fit = fit, area.type = "Fitted")
list(
HS = fit[["HS"]], E_inf = fit[["E_inf"]]/100, EC50 = fit[["EC50"]],
Rsq = as.numeric(unlist(attributes(fit))),
AAC = AAC,
IC50 = IC50
)
},
assay="mean_sensitivity",
subset= treatmentid %in% rowData(tre_avged)[,unique(treatmentid)][1:3],
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles"
)
tre_avged$mean_sensitivity
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
},
assay="mean_sensitivity",
subset= treatmentid %in% rowData(tre_avged)[,unique(treatmentid)][1:3],
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles"
)
tre_profiled
tre_profiled$profiles
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
},
assay="mean_sensitivity",
subset= treatmentid %in% rowData(tre_avged)[,unique(treatmentid)][1:3],
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles"
)
CoreGx::optimizeCoreGx(tre_avged)
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
},
assay="mean_sensitivity",
subset= treatmentid %in% rowData(tre_avged)[,unique(treatmentid)][1:3],
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles",
nthreads=4
)
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
},
assay="mean_sensitivity",
subset= treatmentid %in% rowData(tre_avged)[,unique(treatmentid)][1:3],
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles",
nthread=4
)
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
},
assay="mean_sensitivity",
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles",
nthread=4
)
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
IC50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit = fit)
AAC <- PharmacoGx::computeAUC(treatmentdose, Hill_fit = fit, area.type = "Fitted")
list(
HS = fit[["HS"]], E_inf = fit[["E_inf"]]/100, EC50 = fit[["EC50"]],
Rsq = as.numeric(unlist(attributes(fit))),
AAC = AAC,
IC50 = IC50
)
},
assay="mean_sensitivity",
subset= treatmentid %in% rowData(tre_avged)[,unique(treatmentid)][1:3],
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles"
)
tre_profiled <- tre_avged |>
endoaggregate(
{
fit <- PharmacoGx::logLogisticRegression(treatmentdose, viability)
IC50 <- PharmacoGx::computeIC50(treatmentdose, Hill_fit = fit)
AAC <- PharmacoGx::computeAUC(treatmentdose, Hill_fit = fit, area.type = "Fitted")
list(
HS = fit[["HS"]], E_inf = fit[["E_inf"]]/100, EC50 = fit[["EC50"]],
Rsq = as.numeric(unlist(attributes(fit))),
AAC = AAC,
IC50 = IC50
)
},
assay="mean_sensitivity",
by = c("treatmentid", "sampleid", "bio_rep"),
enlist=FALSE,
target="profiles",
nthread=6
)
tre_profiled
tre_profiled$profiles
??mean
usethis::use_package("rsconnect", suggests=TRUE)
usethis::use_package("rsconnect", "Suggests")
pkgdown::build_site()
usethis::use_package("rsconnect", "Suggests")
pkgdown::build_site()
usethis::use_package("ggplot2")
usethis::use_package("dplyr")
rsconnect::setAccountInfo(name='jjjermiah', token='CC470B728BF7C0A396CD0FF504B27E86', secret='C/bZN4XIc7CujnUTeJir13URcii73C9ZP+so7syY')
usethis::use_r("tutorial")
CBWWorkshop2024::module2tutorial()
git status
help("summarizeMolecularProfiles,PharmacoSet-method")
summarizeMolecularProfiles(pset, mDataType="rnaseq", cell.lines=sampleNames(pset)[1:5])
summarizeMolecularProfiles(pset, mDataType="rnaseq.tpm.batch", cell.lines=sampleNames(pset)[1:5])
cell.lines=sampleNames(pset)[1:5]
sampleNames(pset)[1:5]
summarizeMolecularProfiles(pset, mDataType="rnaseq.tpm.batch", cell.lines=c("NCI-H23"))
featureNames(pset)
featureNames(pset@molecularProfiles)
featureNames(pset@molecularProfiles[["rnaseq.tpm.batch"]])
featureNames
showMethods(featureNames)
rowData(molecularProfiles(pset)[["rnaseq.tpm"]])
rowNames(molecularProfiles(pset)[["rnaseq.tpm"]])
molecularProfiles(pset)[["rnaseq.tpm"]]
rownames(molecularProfiles(pset)[["rnaseq.tpm"]])
summarizeMolecularProfiles(pset, mDataType="rnaseq.tpm.batch", cell.lines=c("NCI-H23"), features=c("GENE060"
))
summarizeMolecularProfiles(pset, mDataType="rnaseq.tpm.batch", cell.lines=c("NCI-H23"), features=c("GENE060"))
summarizeSensitivityProfiles(pset)
help("summarizeSensitivityProfiles,PharmacoSet-method")
pset
