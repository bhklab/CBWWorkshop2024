data("NCI60_molecular_data")
allsampleids <- NCI60_molecular_data$sampleid
sampleids <- allsampleids[seq(1, length(allsampleids), by = 2)]
num_samples <- length(sampleids)
# Generate fake gene IDs based on Gencode annotation pattern
gene_ids <- paste0("GENE", sprintf("%03d", 1:100))  # 100 fake Gencode gene IDs
dummy_sampleMetadata <- NCI_ALMANAC_sample_metadata[sampleids,]
# Create a matrix of TPM normalized counts with random values between 0 and 100
tpm_matrix <- matrix(
runif(num_samples * length(gene_ids), 0, 100),
nrow = length(gene_ids),
dimnames = list(gene_ids, sampleids)
)
MultiAssayExperiment(experiments=list("rnaseq.tpm"=tpm_matrix), colData = dummy_sampleMetadata)
dummy_mae <- MultiAssayExperiment(
experiments=list("rnaseq.tpm"=tpm_matrix),
colData = dummy_sampleMetadata
)
usethis::use_data(dummy_mae, overwrite = TRUE)
dummy_mae
data("NCI_ALMANAC_raw")
NCI_ALMANAC_raw
data("NCI_ALMANAC_treatment_metadata")
NCI_ALMANAC_treatment_metadata
NCI_ALMANAC_treatment_metadata |> names()
NCI_ALMANAC_treatment_metadata[, ~"smiles"]
NCI_ALMANAC_treatment_metadata[, ~c("smiles")]
NCI_ALMANAC_treatment_metadata[, !c("smiles")]
NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
seq(1, length(subset_treatmentmeta$treatmentid), by = 2)
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
seq(1, length(subset_treatmentmeta$treatmentid), by = 2)
subset_treatmentmeta[seq(1, length(subset_treatmentmeta$treatmentid), by = 2)]
subset_treatmentmeta[seq(1, length(subset_treatmentmeta$treatmentid), by = 2), ]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
subset_treatmentmeta
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 10,]
subset_treatmentmeta
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
subset_treatmentmeta
NCI_ALMANAC_raw
NCI_ALMANAC_raw$treatment1dose |> unique()
raw <- data.table::as.data.table(NCI_ALMANAC_raw)
raw
raw[!is.na(treatment2id)]
raw[treatment2id != ""]
raw[treatment2id == ""]
raw[treatment2id == "", unique(treatment1dose)]
raw[treatment2id == "", unique(treatment1dose), by = c(treatment1id, sampleid)]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][1:100]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)]["1,3-Bis(2-chloroethyl)-1-nitrosourea", "786-O"]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][treatment1id == "1,3-Bis(2-chloroethyl)-1-nitrosourea" && sampleid== "786-O"]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][treatment1id == "1,3-Bis(2-chloroethyl)-1-nitrosourea"]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][treatment1id == "1,3-Bis(2-chloroethyl)-1-nitrosourea"][sampleid=="786-O"]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][treatment1id == "1,3-Bis(2-chloroethyl)-1-nitrosourea"][sampleid=="786-O"]$V1
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][treatment1id %in% treatmentids]
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][treatment1id %in% treatmentids]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
treatmentids <- subset_treatmentmeta$treatmentid
raw[treatment2id == "", unique(treatment1dose), by = .(treatment1id, sampleid)][treatment1id %in% treatmentids]
raw[treatment2id == "", ]treatment1id %in% treatmentids]
raw[treatment2id == "", .(treatment1id, treatment1dose) ]treatment1id %in% treatmentids]
raw[treatment2id == "", .(treatment1id, treatment1dose) ][treatment1id %in% treatmentids]
raw
raw[treatment2id == "", .(treatment1id, treatment1dose,sampleid, PANEL, viability) ][treatment1id %in% treatmentids]
raw[treatment2id == "", .(treatment1id, treatment1dose,sampleid, PANEL, viability) ][treatment1id %in% treatmentids & 1=1]
raw[treatment2id == "", .(treatment1id, treatment1dose,sampleid, PANEL, viability) ][treatment1id %in% treatmentids & 1==1]
raw[treatment2id == "", .(treatment1id, treatment1dose,sampleid, PANEL, viability) ][treatment1id %in% treatmentids & sampleid %in% sampleids]
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
NCI_ALMANAC_raw[treatment2id == "", .(treatment1id, treatment1dose,sampleid, PANEL, viability) ][treatment1id %in% treatmentids & sampleid %in% sampleids]
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
NCI_ALMANAC_raw[
treatment2id == "",
.(treatment1id, treatment1dose,sampleid, PANEL, viability)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
.(treatment1id, treatment1dose,sampleid, PANEL, viability)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
subset_raw_tr[, .N, by = .(treatmentid, sampleid)]
subset_raw_tr[, .N, by = .(treatment1id, sampleid)]
subset_raw_tr[, .N, by = .(treatment1id, sampleid, treatment1dose)]
subset_raw_tr[, .N, by = .(treatment1id, sampleid, treatment1dose)][order(-N)]
subset_raw_tr[, mean(viability), by = .(treatment1id, sampleid, treatment1dose)]
subet_raw_tr
subset_raw_tr
subset_raw_tr[, mean(viability), by = .(treatment1id, sampleid, treatment1dose)]
subset_raw_tr[, mean(viability), by = .(treatment1id, sampleid, treatment1dose, PANEL)]
abc <- subset_raw_tr[, mean(viability), by = .(treatment1id, sampleid, treatment1dose, PANEL)]
abc[treatment1id == "Amifostine" & sampleid =="786-0"]
abc
abc[treatment1id == "Amifostine"]
abc[treatment1id == "Amifostine" & sampleid == "786-0"]
abc[treatment1id == "Amifostine" & sampleid == "786-0",]
abc[treatment1id == "Amifostine" & sampleid == "786-O",]
NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL, viability)
]
NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL, viability)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
viability := mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
subset_raw_tr
NCI_ALMANAC_raw[
treatment2id == "",
viability = mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL)
]
NCI_ALMANAC_raw
data("NCI_ALMANAC_raw")
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
treatmentids <- subset_treatmentmeta$treatmentid
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
subset_raw_tr
data.table::setnames(subset_raw_tr, "V1", "viability")
subset_raw_tr
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
data("NCI_ALMANAC_2017")
NCI_ALMANAC_2017
nci_tre_small
data.table::setnames(subset_raw_tr, c("V1", "treatment1id", "treatment1dose"), c("viability", "treatmentid", "treatmentdose"))
data("NCI_ALMANAC_raw")
data("NCI_ALMANAC_treatment_metadata")
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
treatmentids <- subset_treatmentmeta$treatmentid
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
data.table::setnames(subset_raw_tr, c("V1", "treatment1id", "treatment1dose"), c("viability", "treatmentid", "treatmentdose"))
subset_raw_tr
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
CoreGx::assayMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose", "sampleid"),
)
)
CoreGx::colDataMap(tremapper) <- list(
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
CoreGx::assayMap(tremapper) <- list(
CoreGx::colDataMap(tremapper) <- list(
CoreGx::assayMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose", "sampleid"),
mapped_columns=c("viability")
)
)
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
CoreGx::assayMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose", "sampleid"),
mapped_columns=c("viability")
)
)
CoreGx::colDataMap(tremapper) <- list(
CoreGx::colDataMap(tremapper) <- list(
raw = list(
id_columns=c("sampleid"),
mapped_columns=c("PANEL")
)
)
(dummy_tre <- metaConstruct(treDataMapper))
(dummy_tre <- CoreGx::metaConstruct(tremapper))
NCI_ALMANAC_raw
raw = list(
mapped_columns=c()
(dummy_tre <- CoreGx::metaConstruct(tremapper))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid"),
mapped_columns=c()
))
(dummy_tre <- CoreGx::metaConstruct(tremapper))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid")
))
(dummy_tre <- CoreGx::metaConstruct(tremapper))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid"),
mapped_columns=c("")
))
data("NCI_ALMANAC_raw")
data("NCI_ALMANAC_treatment_metadata")
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
treatmentids <- subset_treatmentmeta$treatmentid
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL, CONC1)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
data.table::setnames(subset_raw_tr, c("V1", "treatment1id", "treatment1dose"), c("viability", "treatmentid", "treatmentdose"))
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
CoreGx::assayMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose", "sampleid"),
mapped_columns=c("viability")
)
)
CoreGx::colDataMap(tremapper) <- list(
raw = list(
id_columns=c("sampleid"),
mapped_columns=c("PANEL")
)
)
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid"),
mapped_columns=c("CONC1")
))
(dummy_tre <- CoreGx::metaConstruct(tremapper))
tremapper
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatment1dose"),
mapped_columns=c("CONC1")
))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose"),
mapped_columns=c("CONC1")
))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose"),
mapped_columns=c("CONC1")
))
tremapper
treatmentids <- subset_treatmentmeta$treatmentid
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL, CONC1)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
data.table::setnames(subset_raw_tr, c("V1", "treatment1id", "treatment1dose"), c("viability", "treatmentid", "treatmentdose"))
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
CoreGx::assayMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose", "sampleid"),
mapped_columns=c("viability")
)
)
CoreGx::colDataMap(tremapper) <- list(
raw = list(
id_columns=c("sampleid"),
mapped_columns=c("PANEL")
)
)
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose"),
mapped_columns=c("CONC1")
))
(dummy_tre <- CoreGx::metaConstruct(tremapper))
tremapper
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid"),
mapped_columns=c("CONC1")
))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose"),
mapped_columns=c("CONC1")
))
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose"),
mapped_columns=c("CONC1")
))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose"),
mapped_columns=c("CONC1")
))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentdose"),
mapped_columns=c("CONC1")
))
CoreGx::rowDataMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentdose", "treatmentid"),
mapped_columns=c("CONC1")
))
CoreGx::guessMapping(
tremapper,
list(
rowDataMap=c("treatmentdose", "treatmentid"),
colDataMap=c("sampleid"),
assayMap=c("treatmentdose", "treatmentid", "sampleid")
)
)
CoreGx::guessMapping(
tremapper,
list(
rowDataMap=c("treatmentdose", "treatmentid"),
colDataMap=c("sampleid"),
assayMap=c("treatmentdose", "treatmentid", "sampleid")
),
subset=TRUE
)
CoreGx::rowDataMap(tremapper) <- guess$rowDataMap
guess <- CoreGx::guessMapping(
tremapper,
list(
rowDataMap=c("treatmentdose", "treatmentid"),
colDataMap=c("sampleid"),
assayMap=c("treatmentdose", "treatmentid", "sampleid")
),
subset=TRUE
)
CoreGx::rowDataMap(tremapper) <- guess$rowDataMap
CoreGx::colDataMap(tremapper) <- guess$colDataMap
CoreGx::assayMap(tremapper) <- guess$assayMap
(dummy_tre <- CoreGx::metaConstruct(tremapper))
tremapper
tremapper
CoreGx::metaConstruct(tremapper)
debugonce( CoreGx::metaConstruct)
CoreGx::metaConstruct(tremapper)
debugonce( CoreGx::metaConstruct)
CoreGx::metaConstruct(tremapper)
debugonce( CoreGx::metaConstruct)
CoreGx::metaConstruct(tremapper)
force(mapper)
View(mapper)
View(mapper)
# CoreGx::assayMap(tremapper) <- guess$assayMap
CoreGx::assayMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose", "sampleid"),
mapped_columns=c("viability")
)
)
# CoreGx::assayMap(tremapper) <- guess$assayMap
CoreGx::assayMap(tremapper) <- list(
raw = list(
id_columns=c("treatmentid", "treatmentdose", "sampleid"),
mapped_columns=c("viability")
)
)
(dummy_tre <- CoreGx::metaConstruct(tremapper))
guess
guess$assayMap
CoreGx::assayMap(tremapper) <- list( raw = guess$assayMap)
(dummy_tre <- CoreGx::metaConstruct(tremapper))
dummy_tre
subset_treatmentmeta
PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=subset_samplemeta,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre
)
PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre
)
dummy_sampleMetadata
subset_treatmentmeta
dummy_mae
dummy_tre
PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre
)
PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre,
curation = list(sample = data.frame(),treatment = data.frame(), tissue = data.frame())
)
class(dummy_sampleMetadata)
class(subset_treatmentmeta)
dummy_mae
SummarizedExperiment::SummarizedExperiment(assays=list(exprs=tpm_matrix))
dummy_se <- SummarizedExperiment::SummarizedExperiment(assays=list(exprs=tpm_matrix))
dummy_mae <- MultiAssayExperiment(
experiments=list("rnaseq.tpm"=dummy_se),
colData = dummy_sampleMetadata
)
dummy_mae
usethis::use_data(dummy_mae, overwrite = TRUE)
data("NCI_ALMANAC_raw")
data("NCI_ALMANAC_treatment_metadata")
subset_treatmentmeta <- NCI_ALMANAC_treatment_metadata[, c("treatmentid", "cid", "inchikey")]
subset_treatmentmeta <- subset_treatmentmeta[nchar(subset_treatmentmeta$treatmentid) < 12,]
treatmentids <- subset_treatmentmeta$treatmentid
# Create a long table of treatment response data for each pair of treatmentid and sampleid
# Each row will represent a single treatment response measurement
# There will be the following doses
subset_raw_tr <- NCI_ALMANAC_raw[
treatment2id == "",
mean(viability), by = .(treatment1id, treatment1dose,sampleid, PANEL, CONC1)
][
treatment1id %in% treatmentids & sampleid %in% sampleids
]
data.table::setnames(subset_raw_tr, c("V1", "treatment1id", "treatment1dose"), c("viability", "treatmentid", "treatmentdose"))
tremapper <- CoreGx::TREDataMapper(rawdata=subset_raw_tr)
guess <- CoreGx::guessMapping(
tremapper,
list(
rowDataMap=c("treatmentdose", "treatmentid"),
colDataMap=c("sampleid"),
assayMap=c("treatmentdose", "treatmentid", "sampleid")
),
subset=TRUE
)
CoreGx::rowDataMap(tremapper) <- guess$rowDataMap
CoreGx::colDataMap(tremapper) <- guess$colDataMap
CoreGx::assayMap(tremapper) <- list( raw = guess$assayMap)
(dummy_tre <- CoreGx::metaConstruct(tremapper))
PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre,
curation = list(sample = data.frame(),treatment = data.frame(), tissue = data.frame())
)
dummy_se <- SummarizedExperiment::SummarizedExperiment(
assays=list(exprs=tpm_matrix),
colData=data.frame(sampleid=sampleids, batchid=1)
)
dummy_mae <- MultiAssayExperiment(
experiments=list("rnaseq.tpm"=dummy_se),
colData = dummy_sampleMetadata
)
PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre,
curation = list(sample = data.frame(),treatment = data.frame(), tissue = data.frame())
)
(dummy_pset <- PharmacoGx::PharmacoSet2(
name="dummy_pset",
treatment=subset_treatmentmeta,
sample=dummy_sampleMetadata,
molecularProfiles=dummy_mae,
treatmentResponse=dummy_tre,
curation = list(sample = data.frame(),treatment = data.frame(), tissue = data.frame())
))
usethis::use_data(dummy_pset, overwrite = TRUE)
exit
quit()
